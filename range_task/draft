aclass Range:

    def __init__(self, first_start:float, first_end:float, second_start:float, second_end:float):
        self.__first_start = first_start
        self.__first_end = first_end
        self.__second_start = second_start
        self.__second_end = second_end

    @property
    def first_start(self):
        return self.__first_start

    @first_start.setter
    def first_start(self, first_start):
        self.__first_start = first_start

    @property
    def second_start(self):
        return self.__second_start

    @second_start.setter
    def second_start(self, second_start):
        self.__second_start = second_start

    @property
    def first_end(self):
        return self.__first_end

    @first_end.setter
    def first_end(self, first_end):
        self.__first_end = first_end

    @property
    def second_end(self):
        return self.__second_end

    @second_end.setter
    def second_end(self, second_end):
        self.__second_end = second_end

    def length(self):
        print(f"Длина первого диапазона: {abs(self.first_end - self.first_start)}")
        print((f"Длина второго диапазона: {abs(self.second_end - self.second_start)}")

    def is_inside(self, number: float) -> bool:
        return self.__start <= number <= self.__end


class Range:

    def __init__(self, start:float, end:float):
        self.__start = start
        self.__end = end

    @property
    def start(self):
        return self.__start

    @start.setter
    def start(self, start):
        self.__start = start

    @property
    def end(self):
        return self.__end

    @end.setter
    def end(self, end):
        self.__end = end

    def length(self) -> float:
        return self.__end - self.__start

    def is_inside(self, number: float) -> bool:
        return self.__start <= number <= self.__end

    def intersection(self):